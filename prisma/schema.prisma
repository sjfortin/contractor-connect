// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id Int @id @default(autoincrement())
}

// Necessary for Next auth
model Account {
    id                Int     @id @default(autoincrement())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    User         User     @relation(fields: [userId], references: [id])
}

model User {
    id              Int       @id @default(autoincrement())
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    firstName       String?
    lastName        String?
    email           String?   @unique
    emailVerified   DateTime?
    image           String?
    role            String?
    accounts        Account[]
    sessions        Session[]
    projectsCreated Project[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Project {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    projectSlug String   @unique
    name        String
    category    String
    User        User?    @relation(fields: [userId], references: [id])
    userId      Int?
}

// model ProjectCategory {
//     id          Int       @id @default(autoincrement())
//     createdAt   DateTime  @default(now())
//     updatedAt   DateTime  @updatedAt
//     name        String
//     description String?
//     projects    Project[]
// }
